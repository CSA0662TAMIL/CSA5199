#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to compute (base^exp) mod q using modular exponentiation
long long mod_exp(long long base, long long exp, long long q) {
    long long result = 1;
    base = base % q;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % q;
        }
        exp = exp >> 1;
        base = (base * base) % q;
    }
    return result;
}

int main() {
    long long a = 5; // Public base
    long long q = 23; // Public modulus (prime number)
    
    // Alice's private key (x)
    long long x = 6;
    
    // Bob's private key (y)
    long long y = 15;
    
    // Alice computes A = a^x mod q
    long long A = mod_exp(a, x, q);
    printf("Alice sends A = %lld\n", A);
    
    // Bob computes B = a^y mod q
    long long B = mod_exp(a, y, q);
    printf("Bob sends B = %lld\n", B);
    
    // Alice computes shared key K = B^x mod q
    long long K_Alice = mod_exp(B, x, q);
    printf("Alice computes shared key K_Alice = %lld\n", K_Alice);
    
    // Bob computes shared key K = A^y mod q
    long long K_Bob = mod_exp(A, y, q);
    printf("Bob computes shared key K_Bob = %lld\n", K_Bob);
    
    if (K_Alice == K_Bob) {
        printf("The shared secret key is: %lld\n", K_Alice);
    } else {
        printf("Key mismatch!\n");
    }

    return 0;
}
