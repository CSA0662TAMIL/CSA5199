#include <stdio.h>
#include <openssl/des.h>
#include <openssl/rand.h>
#include <string.h>

#define BLOCK_SIZE 8

// Function to print ciphertext in hexadecimal format
void print_hex(const unsigned char *data, size_t len) {
    for (size_t i = 0; i < len; i++) {
        printf("%02x", data[i]);
    }
    printf("\n");
}

// Function to perform 3DES CBC encryption
void triple_des_cbc_encrypt(const unsigned char *plaintext, size_t length,
                             const unsigned char *key1, const unsigned char *key2, const unsigned char *key3,
                             unsigned char *ciphertext, unsigned char *iv) {
    DES_key_schedule ks1, ks2, ks3;
    DES_cblock keyblock1, keyblock2, keyblock3;
    
    // Set the keys for 3DES
    memcpy(keyblock1, key1, DES_KEY_SZ);
    memcpy(keyblock2, key2, DES_KEY_SZ);
    memcpy(keyblock3, key3, DES_KEY_SZ);
    
    DES_set_key_checked(&keyblock1, &ks1);
    DES_set_key_checked(&keyblock2, &ks2);
    DES_set_key_checked(&keyblock3, &ks3);
    
    DES_cbc_encrypt(plaintext, ciphertext, length, &ks1, iv, DES_ENCRYPT);
    DES_cbc_encrypt(ciphertext, ciphertext, length, &ks2, iv, DES_DECRYPT);
    DES_cbc_encrypt(ciphertext, ciphertext, length, &ks3, iv, DES_ENCRYPT);
}

int main() {
    // Example plaintext (must be a multiple of 8 bytes for DES)
    const char *plaintext = "This is a secret message!";
    size_t length = strlen(plaintext) + 1;  // Including the null terminator
    
    // Key material (each is 8 bytes for DES)
    unsigned char key1[DES_KEY_SZ] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
    unsigned char key2[DES_KEY_SZ] = {0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10};
    unsigned char key3[DES_KEY_SZ] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
    
    // Initialization Vector (IV) for CBC mode (8 bytes)
    unsigned char iv[DES_BLOCK_SIZE];
    RAND_bytes(iv, DES_BLOCK_SIZE);  // Generate a random IV
    
    // Allocate memory for ciphertext
    unsigned char ciphertext[length];
    
    // Perform 3DES CBC encryption
    triple_des_cbc_encrypt((unsigned char *)plaintext, length, key1, key2, key3, ciphertext, iv);
    
    // Print the ciphertext in hexadecimal format
    printf("Ciphertext: ");
    print_hex(ciphertext, length);
    
    return 0;
}
