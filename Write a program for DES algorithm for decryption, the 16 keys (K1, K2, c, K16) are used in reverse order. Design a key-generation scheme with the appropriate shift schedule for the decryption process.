#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define DES_BLOCK_SIZE 8

// Initial permutation table
int initial_permutation[64] = {
    58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9,  1, 59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7
};

// Final permutation table
int final_permutation[64] = {
    40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25
};

// Expansion permutation table
int expansion_table[48] = {
    32, 1,  2,  3,  4,  5, 4,  5,  6,  7,  8,  9, 8,  9,  10, 11,
    12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21,
    22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1
};

// Permutation P table
int p_table[32] = {
    16, 7,  20, 21, 29, 12, 28, 17, 1,  15, 23, 26, 5,  18, 31, 10,
    2,  8,  24, 14, 32, 27, 3,  9,  19, 13, 30, 6,  22, 11, 4,  25
};

// Shift schedule
int shift_schedule[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// Function to perform the initial permutation
void initial_permute(uint64_t *block) {
    uint64_t permuted = 0;
    for (int i = 0; i < 64; i++) {
        permuted |= ((*block >> (64 - initial_permutation[i])) & 1) << (63 - i);
    }
    *block = permuted;
}

// Function to perform the final permutation
void final_permute(uint64_t *block) {
    uint64_t permuted = 0;
    for (int i = 0; i < 64; i++) {
        permuted |= ((*block >> (64 - final_permutation[i])) & 1) << (63 - i);
    }
    *block = permuted;
}

// Function to generate 16 subkeys (key scheduling)
void generate_keys(uint64_t key, uint64_t subkeys[16]) {
    uint64_t C = (key >> 28) & 0xFFFFFFF, D = key & 0xFFFFFFF;
    for (int i = 0; i < 16; i++) {
        C = ((C << shift_schedule[i]) | (C >> (28 - shift_schedule[i]))) & 0xFFFFFFF;
        D = ((D << shift_schedule[i]) | (D >> (28 - shift_schedule[i]))) & 0xFFFFFFF;
        subkeys[i] = ((uint64_t)C << 28) | D;
    }
}

// Function to perform DES Feistel round function
uint32_t feistel(uint32_t R, uint64_t subkey) {
    uint64_t expanded_R = 0;
    for (int i = 0; i < 48; i++) {
        expanded_R |= ((R >> (32 - expansion_table[i])) & 1) << (47 - i);
    }
    expanded_R ^= subkey;  // XOR with subkey
    uint32_t P_result = 0;
    for (int i = 0; i < 32; i++) {
        P_result |= ((expanded_R >> (32 - p_table[i])) & 1) << (31 - i);
    }
    return P_result;
}

// Function to perform DES decryption
void des_decrypt(uint64_t *block, uint64_t subkeys[16]) {
    initial_permute(block);
    uint32_t L = *block >> 32, R = *block & 0xFFFFFFFF;
    for (int i = 15; i >= 0; i--) {  // Reverse key order for decryption
        uint32_t newR = L ^ feistel(R, subkeys[i]);
        L = R;
        R = newR;
    }
    *block = ((uint64_t)R << 32) | L;
    final_permute(block);
}

int main() {
    uint64_t ciphertext = 0x1234567890ABCDEF, key = 0x133457799BBCDFF1;
    uint64_t subkeys[16];

    generate_keys(key, subkeys);
    des_decrypt(&ciphertext, subkeys);

    printf("Decrypted text: %016llX\n", ciphertext);
    return 0;
}
